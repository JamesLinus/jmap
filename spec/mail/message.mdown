# Messages

A message is **immutable** except for the boolean `isXXX` status properties and the set of mailboxes it is in. This allows for more efficient caching of messages, and gives easier backwards compatibility for servers implementing an IMAP interface to the same data.

JMAP completely hides the complexities of MIME. All special encodings of either headers or textual body parts, such as [base64](https://tools.ietf.org/html/rfc4648), or [RFC 2047](http://tools.ietf.org/html/rfc2047) encoding of non-ASCII characters, MUST be fully decoded into UTF-8.

A **Message** object has the following properties. All are **immutable** unless otherwise stated:

- **id**: `String`
  The id of the message. This property may only be set by the server.
- **blobId**: `String`
  The id representing the raw [@!RFC5322] message. This may be used to download
  the original message or to attach it directly to another message etc. This property may only be set by the server.
- **threadId**: `String`
  The id of the thread to which this message belongs. This property may only be set by the server.
- **mailboxIds**: `String[Boolean]` (Mutable)
  The set of mailbox ids this message is in. A message MUST belong to one or more mailboxes at all times (until it is deleted). The set is represented as an object, with each key being a *Mailbox id*. The value for each key in the object MUST be `true`.
- **keywords**: `String[Boolean]` (Mutable)
  A set of keywords that apply to the message. The set is represented as an object, with the keys being the *keywords*. The value for each key in the object MUST be `true`.

    Keywords are shared with IMAP. The six system keywords from IMAP are treated specially. The following four keywords have their first character changed from `\` in IMAP to `$` in JMAP and have particular semantic meaning:

    - `$Draft`: The message is a draft the user is composing.
    - `$Seen`: The message has been read.
    - `$Flagged`: The message has been flagged for urgent/special attention.
    - `$Answered`: The message has been replied to.

    The IMAP `\Recent` keyword is not exposed via JMAP. The IMAP `\Deleted` keyword is also not present: IMAP uses a delete+expunge model, which JMAP does not. Any message with the `\Deleted` keyword MUST NOT be visible via JMAP.

    Users may add arbitrary keywords to a message. For compatibility with IMAP, a keyword is a (case-sensitive) string of 1–255 characters in the ASCII subset %x21–%x7e (excludes control chars and space), and MUST NOT include any of these characters: `( ) { ] % * " \`

    The [IANA Keyword Registry](https://www.iana.org/assignments/imap-keywords/imap-keywords.xhtml) as established in [@!RFC5788] assigns semantic meaning to some other keywords in common use. New keywords may be established here in the future. In particular, note:

    - `$Forwarded`: The message has been forwarded.
    - `$Phishing`: The message is highly likely to be phishing. Clients SHOULD warn users to take care when viewing this message and disable links and attachments.
    - `$Junk`: The message is definitely spam. Clients SHOULD set this flag when users report spam to help train automated spam-detection systems.
    - `$NotJunk`: The message is definitely not spam. Clients SHOULD set this flag when users indicate a message is legitimate, to help train automated spam-detection systems.
- **hasAttachment**: `Boolean`
  Does the message have any attachments? This property may only be set by the server, based on the *attachments* property.
- **headers**: `String[String]`
  A map of lower-cased header name to (decoded) header value for all headers in the message. For headers that occur multiple times (e.g. `Received`), the values are concatenated with a single new line (`\n`) character in between each one.
- **sender**: `Emailer|null`
  An Emailer object (see below) containing the name/email from the parsed `Sender` header of the email. If the email doesn't have a `Sender` header, this is `null`.
- **from**: `Emailer[]|null`
  An array of name/email objects (see below) representing the parsed `From` header of the email, in the same order as they appear in the header. If the email doesn't have a `From` header, this is `null`. If the header exists but does not have any content, the response is an array of zero length.
- **to**:  `Emailer[]|null`
  An array of name/email objects (see below) representing the parsed `To` header of the email, in the same order as they appear in the header. If the email doesn't have a `To` header, this is `null`. If the header exists but does not have any content, the response is an array of zero length.
- **cc**:  `Emailer[]|null`
  An array of name/email objects (see below) representing the parsed `Cc` header of the email, in the same order as they appear in the header. If the email doesn't have a `Cc` header, this is `null`. If the header exists but does not have any content, the response is an array of zero length.
- **bcc**:  `Emailer[]|null`
  An array of name/email objects (see below) representing the parsed `Bcc` header of the email. If the email doesn't have a `Bcc` header (which will be true for most emails outside of the Sent mailbox), this is `null`. If the header exists but does not have any content, the response is an array of zero length.
- **replyTo**: `Emailer[]|null`
  An array of name/email objects (see below) representing the parsed `Reply-To` header of the email, in the same order as they appear in the header. If the email doesn't have a `Reply-To` header, this is `null`. If the header exists but does not have any content, the response is an array of zero length.
- **subject**: `String`
  The subject of the message. If none, defaults to the empty string, not `null`.
- **date**: `Date`
  The date the message was sent (or saved, if the message is a draft).
- **size**: `Number`
  The size in bytes of the whole message as counted by the server towards the user's quota. This property may only be set by the server.
- **preview**: `String`
  Up to 256 characters of the beginning of a plain text version of the message body. This is intended to be shown as a preview line on a mailbox listing, and the server may choose to skip quoted sections or salutations to return a more useful preview. This property may only be set by the server.
- **textBody**: `String`
  The plain text body part for the message. If there is only an HTML version of the body, a plain text version MUST be generated from this; the exact method of conversion in this case is not defined and is server-specific. If there is neither a `text/plain` nor a `text/html` body part, this MUST be the empty string.
- **htmlBody**: `String|null`
  The HTML body part for the message if present.
- **attachments**: `Attachment[]|null`
  An array of attachment objects (see below) detailing all the attachments to the message.
- **attachedMessages**: `String[Message]|null`
  An object mapping attachment id (as found in the `attachments` property) to a **Message** object with the following properties, for each [@!RFC5322] message attached to this one:

    - headers
    - from
    - to
    - cc
    - bcc
    - replyTo
    - subject
    - date
    - textBody
    - htmlBody
    - attachments
    - attachedMessages

    This property may only be set by the server, based on the *attachments* property.

An **Emailer** object has the following properties:

- **name**: `String`
  The name of the sender/recipient. If a name cannot be extracted for an email, this property SHOULD be the empty string.
- **email**: `String`
  The email address of the sender/recipient. This MUST be of the form `"<mailbox>@<host>"` If a `host` or even `mailbox` cannot be extracted for an email, the empty string SHOULD be used for this part (so the result MUST always still contain an `"@"` character).

Group information and comments from the RFC 5322 header MUST be discarded when converting into an Emailer object.

Example array of Emailer objects:

    [
        {name:"Joe Bloggs", email:"joeb@example.com"},
        {name:"", email:"john@example.com"},
        {name:"John Smith", email: "john@"}
    ]

An **Attachment** object has the following properties:

- **blobId**: `String`
  The id of the binary data.
- **type**: `String`
  The content-type of the attachment.
- **name**: `String|null`
  The full file name, e.g. "myworddocument.doc", if available.
- **size**: `Number`
  The size, in bytes, of the attachment when fully decoded (i.e. the number of bytes in the file the user would download).
- **cid**: `String|null`
  The id used within the message body to reference this attachment. This is only unique when paired with the message id, and has no meaning without reference to that.
- **isInline**: `Boolean`
  True if the attachment is referenced by a `cid:` link from within the HTML body of the message.
- **width**: `Number|null` (optional, server MAY omit if not supported)
  The width (in px) of the image, if the attachment is an image.
- **height**: `Number|null` (optional, server MAY omit if not supported)
  The height (in px) of the image, if the attachment is an image.

To add an attachment, the file must first be uploaded using the standard upload mechanism; this will give the client a blobId that may be used to identify the file. The `cid` property may be assigned by the client, and is solely used for matching up with `cid:<id>` links inside the `htmlBody`.

The following JMAP methods are supported:

## getMessages

Standard *getFoos* method, except the client may use the following pseudo values in the *properties* argument:

- **body**: If `"body"` is included in the list of requested properties, it MUST be interpreted by the server as a request for `"htmlBody"` if the message has an HTML part, or `"textBody"` otherwise.
- **headers.property**: Instead of requesting all the headers (by requesting the `"headers"` property, the client may specify the particular headers it wants using the `headers.property-name` syntax, e.g. `"headers.x-spam-score", "headers.x-spam-hits"`). The server MUST return a *headers* property but with just the requested headers in the object rather than all headers. If `"headers"` is requested, the server MUST ignore the individual header requests and just return all headers. If a requested header is not present in the message, it MUST NOT be present in the *headers* object. Header names are case-insensitive.

### Example

Request:

    ["getMessages", {
      "ids": [ "f123u456", "f123u457" ],
      "properties": [ "threadId", "mailboxIds", "from", "subject", "date" ]
    }, "#1"]

and response:

    ["messages", {
      "accountId": "abc",
      "state": "41234123231",
      "list": [
        {
          id: "f123u457",
          threadId: "ef1314a",
          mailboxIds: { "f123": true },
          from: [{name: "Joe Bloggs", email: "joe@bloggs.com"}],
          subject: "Dinner on Thursday?",
          date: "2013-10-13T14:12:00Z"
        }
      ],
      notFound: [ "f123u456" ]
    }, "#1"]


## getMessageUpdates

Standard *getFooUpdates* method.

## setMessages

Standard *setFoos* method. The *setMessages* method encompasses:

- Creating a draft message
- Changing the flags of a message (unread/flagged status)
- Adding/removing a message to/from mailboxes (moving a message)
- Deleting messages

When creating a message, the client MAY omit the *headers* property. If included, it specifies extra headers to add in addition to any based off the parsed properties (like from/to/subject), or that the server chooses to set. The keys MUST only contain the characters a-z (lower-case only), 0-9 and hyphens. If a header is included that conflicts with one of the other properties on the Message object (e.g. *from*, *date*), the value in the *headers* object MUST be ignored. If not included, the server MUST generate and set a `Message-Id` header in conformance with [@!RFC5322] section 3.6.4.

The *date* property MAY also be omitted when creating a message; the server MUST default it to the current time.

Other than making sure it conforms to the correct type, the server MUST NOT attempt to validate *from*/*to*/*cc*/*bcc* when creating a message. This is to ensure draft messages can be saved at any point.

Destroying a message removes it from all mailboxes to which it belonged. To  just delete a message to trash, simply change the `mailboxIds` property so it is now in the mailbox with `role == "trash"`, and remove all other mailbox ids.

When emptying the trash, clients SHOULD NOT destroy messages which are also in a mailbox other than trash. For those messages, they SHOULD just remove the Trash mailbox from the message.

The following extra *SetError* types are defined:

For **create**:

- `attachmentNotFound`: At least one blob id given in an attachment doesn't
  exist. An extra *notFound* property of type `String[]` MUST be included in the error object containing every *blobId* referenced in *attachments* that could not be found on the server.
- `maxQuotaReached`: The user has reached a server-defined limit on their
  message storage quota.

For **update**:

- `tooManyKeywords`: The change to the message's keywords would exceed a
  server-defined maximum.

## importMessages

The *importMessages* method adds [@!RFC5322] messages to a user's set of messages. The messages must first be uploaded as a file using the standard upload mechanism. It takes the following arguments:

- **accountId**: `String|null`
  The id of the account to use for this call. If `null`, defaults to the primary account.
- **messages**: `String[MessageImport]`
  A map of creation id (client specified) to MessageImport objects

A **MessageImport** object has the following properties:

- **blobId**: `String`
  The id representing the raw [@!RFC5322] message (see the file upload section).
- **mailboxIds** `String[Boolean]`
  The ids of the mailbox(es) to assign this message to. At least one mailbox MUST be given.
- **keywords**: `String[Boolean]|null`
  The keywords to apply to the message, if any.

Each message to import is considered an atomic unit which may succeed or fail individually. Importing successfully creates a new message object from the data reference by the blobId and applies the given mailboxes and keywords.

The server MAY forbid two messages with the same exact [@!RFC5322] content, or even just with the same [@!RFC5322] Message-Id, to coexist within an account. In this case, it should reject attempts to import a message considered a duplicate with an `alreadyExists` SetError. A *messageId* property or type `String` MUST be included on the error object with the id of the existing message.

If the *blobId*, *mailboxIds*, or *keywords* properties are invalid (e.g. missing, wrong type, id not found), the server MUST reject the import with an `invalidProperties` SetError.

If the message cannot be imported because it would take the account over quota, the import should be rejected with a `maxQuotaReached` SetError.

If the blob referenced cannot be parsed as an [@!RFC5322] message, the server MUST reject the import with an `invalidMessage` SetError.

The response to *importMessages* is called *messagesImported*. It has the following arguments:

- **accountId**: `String`
  The id of the account used for this call.
- **created**: `String[Message]`
  A map of the creation id to an object containing the *id*, *blobId*, *threadId* and *size* properties for each successfully imported Message.
- **notCreated**: `String[SetError]`
  A map of creation id to a SetError object for each Message that failed to be created. The possible errors are defined above.

The following errors may be returned instead of the *messageImported* response:

`accountNotFound`: Returned if an *accountId* was explicitly included with the request, but it does not correspond to a valid account.

`accountNotSupportedByMethod`: Returned if the *accountId* given corresponds to a valid account, but the account does not support this data type.

`accountReadOnly`: Returned if the account has `isReadOnly == true`.

`invalidArguments`: Returned if one of the arguments is of the wrong type, or otherwise invalid. A `description` property MAY be present on the response object to help debug with an explanation of what the problem was.

## copyMessages

The only way to move messages **between** two different accounts is to copy them using the *copyMessages* method, then once the copy has succeeded, delete the original. It takes the following arguments:

- **fromAccountId**: `String|null`
  The id of the account to copy messages from. If `null`, defaults to the primary account.
- **toAccountId**: `String|null`
  The id of the account to copy messages to. If `null`, defaults to the primary account.
- **messages**: `String[MessageCopy]`
  A map of *creation id* to a MessageCopy object.

A **MessageCopy** object has the following properties:

- **messageId**: `String`
  The id of the message to be copied in the "from" account.
- **mailboxIds**: `String[Boolean]`
  The ids of the mailboxes (in the "to" account) to add the copied message to. At least one mailbox MUST be given.
- **keywords**: `String[Boolean]|null`
  The *keywords* property for the copy, if any.

The server MAY forbid two messages with the same exact [@!RFC5322] content, or even just with the same [@!RFC5322] Message-Id, to coexist within an account. If dulicates are allowed though, the "from" account may be the same as the "to" account to copy messages within an account.

Each message copy is considered an atomic unit which may succeed or fail individually. Copying successfully MUST create a new message object, with separate ids and mutable properties (e.g. mailboxes and keywords) to the original message.

The response to *copyMessages* is called *messagesCopied*. It has the following arguments:

- **fromAccountId**: `String`
  The id of the account messages were copied from.
- **toAccountId**: `String`
  The id of the account messages were copied to.
- **created**: `String[Message]|null`
  A map of the creation id to an object containing the *id*, *blobId*, *threadId* and *size* properties for each successfully copied Message.
- **notCreated**: `String[SetError]|null`
  A map of creation id to a SetError object for each Message that failed to be copied, `null` if none.

The **SetError** may be one of the following types:

`alreadyExists`: Returned if the server forbids duplicates and the message already exists in the target account. A *messageId* property or type `String` MUST be included on the error object with the id of the existing message.

`notFound`: Returned if the *messageId* given can't be found.

`invalidProperties`: Returned if the *mailboxIds* or *keywords* properties are invalid (e.g. missing, wrong type, id not found).

`maxQuotaReached`: Returned if the user has reached their mail quota so the message cannot be copied.

The following errors may be returned instead of the *messagesCopied* response:

`fromAccountNotFound`: Returned if a *fromAccountId* was explicitly included with the request, but it does not correspond to a valid account.

`toAccountNotFound`: Returned if a *toAccountId* was explicitly included with the request, but it does not correspond to a valid account.

`fromAccountNoMail`: Returned if the *fromAccountId* given corresponds to a valid account, but does not contain any mail data.

`toAccountNoMail`: Returned if the *toAccountId* given corresponds to a valid account, but does not contain any mail data.

`accountReadOnly`: Returned if the "to" account has `isReadOnly == true`.

`invalidArguments`: Returned if one of the arguments is of the wrong type, or otherwise invalid. A `description` property MAY be present on the response object to help debug with an explanation of what the problem was.
